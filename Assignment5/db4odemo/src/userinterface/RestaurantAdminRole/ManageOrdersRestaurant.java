/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.RestaurantAdminRole;

import Business.DeliveryMan.DeliveryMan;
import Business.DeliveryMan.DeliveryManDirectory;
import Business.EcoSystem;
import Business.Restaurant.Item;
import Business.Restaurant.Menu;
import Business.Restaurant.Restaurant;
import Business.Restaurant.RestaurantDirectory;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import Business.WorkQueue.AddToCart;
import Business.WorkQueue.OrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author krupa
 */
public class ManageOrdersRestaurant extends javax.swing.JPanel {

    /**
     * Creates new form manageMenu
     */
    JPanel userProcessContainer;
    EcoSystem ecosystem;
    UserAccountDirectory userAccountList;
    private List<WorkRequest> workRequestList;
    private DeliveryManDirectory deliveryManDirectory;
    OrderWorkRequest workRequest;
    UserAccount account;
    Restaurant restaurant;
    private int index = -1;
    private int qty = 0;
    double total = 0.0;

    
    public ManageOrdersRestaurant(JPanel userProcessContainer, UserAccount account, EcoSystem ecosystem) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.ecosystem = ecosystem;
        this.account = account;
        deliveryManDirectory = ecosystem.getDeliveryManDirectory();
        this.workRequest = workRequest;  

        btnReject.setVisible(false);
        btnAccept.setVisible(false);
        txtDeliveryManName.setVisible(false);

        insertIntoTable();
        
        

        if (deliveryManDirectory.getDeliveryManList().size() > 0) {
            index = 0;
            for (DeliveryMan deliveryMan : deliveryManDirectory.getDeliveryManList()) {
                comboBoxDelPerson.addItem(deliveryMan.getName());
            } 
        }        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderInfo = new javax.swing.JTable();
        lblHeading = new javax.swing.JLabel();
        cartScrollPane1 = new javax.swing.JScrollPane();
        tblOrderCartItems = new javax.swing.JTable();
        comboBoxDelPerson = new javax.swing.JComboBox();
        lblDeliveryPerson = new javax.swing.JLabel();
        lblOrderDate = new javax.swing.JLabel();
        lblOrderStatus = new javax.swing.JLabel();
        lblRestName = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        txtRestName = new javax.swing.JTextField();
        txtOrderDate = new javax.swing.JTextField();
        txtOrderStatus = new javax.swing.JTextField();
        txtTotal = new javax.swing.JTextField();
        btnReject = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        txtDeliveryManName = new javax.swing.JTextField();

        setBackground(new java.awt.Color(153, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));

        jScrollPane2.setForeground(java.awt.Color.white);

        tblOrderInfo.setBackground(new java.awt.Color(153, 0, 0));
        tblOrderInfo.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tblOrderInfo.setForeground(new java.awt.Color(255, 255, 255));
        tblOrderInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "tmp", "Customer Name", "Status", "Request Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrderInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderInfoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrderInfo);

        lblHeading.setBackground(new java.awt.Color(153, 0, 0));
        lblHeading.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(255, 255, 255));
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("MANAGE ORDER");

        cartScrollPane1.setForeground(java.awt.Color.white);

        tblOrderCartItems.setBackground(new java.awt.Color(153, 0, 0));
        tblOrderCartItems.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        tblOrderCartItems.setForeground(new java.awt.Color(255, 255, 255));
        tblOrderCartItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item Name", "Item Qty", "Item Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cartScrollPane1.setViewportView(tblOrderCartItems);

        comboBoxDelPerson.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        comboBoxDelPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxDelPersonActionPerformed(evt);
            }
        });

        lblDeliveryPerson.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblDeliveryPerson.setForeground(java.awt.Color.white);
        lblDeliveryPerson.setText("Delivery Man Name");

        lblOrderDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblOrderDate.setForeground(java.awt.Color.white);
        lblOrderDate.setText("Order Date");

        lblOrderStatus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblOrderStatus.setForeground(java.awt.Color.white);
        lblOrderStatus.setText("Order Status");

        lblRestName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblRestName.setForeground(java.awt.Color.white);
        lblRestName.setText("Restaurant Name");

        lblTotal.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        lblTotal.setForeground(java.awt.Color.white);
        lblTotal.setText("Total");

        txtRestName.setEditable(false);
        txtRestName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtOrderDate.setEditable(false);
        txtOrderDate.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        txtOrderStatus.setEditable(false);
        txtOrderStatus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        txtOrderStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderStatusActionPerformed(evt);
            }
        });

        txtTotal.setEditable(false);
        txtTotal.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        btnReject.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnAccept.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnAccept.setText("Accept");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        txtDeliveryManName.setEditable(false);
        txtDeliveryManName.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
                .addGap(144, 144, 144))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblOrderDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblRestName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblDeliveryPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(59, 59, 59)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtRestName)
                                            .addComponent(txtOrderDate, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtOrderStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(txtDeliveryManName)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(comboBoxDelPerson, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addComponent(lblOrderStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(121, 121, 121))
                            .addComponent(cartScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblDeliveryPerson, lblOrderDate, lblOrderStatus, lblRestName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAccept, btnReject});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(cartScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblDeliveryPerson)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboBoxDelPerson)
                            .addComponent(txtDeliveryManName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRestName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRestName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtOrderStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReject)
                    .addComponent(btnAccept))
                .addContainerGap(191, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblDeliveryPerson, lblOrderDate, lblOrderStatus, lblRestName});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAccept, btnReject});

    }// </editor-fold>//GEN-END:initComponents

    private void comboBoxDelPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxDelPersonActionPerformed

    }//GEN-LAST:event_comboBoxDelPersonActionPerformed

    private void txtOrderStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderStatusActionPerformed

    private void tblOrderInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderInfoMouseClicked
        // TODO add your handling code here:
        
                try{

                int selectedRow = tblOrderInfo.getSelectedRow();
                DefaultTableModel model = (DefaultTableModel) tblOrderCartItems.getModel();

                if (selectedRow >= 0) {
                    WorkRequest request = (WorkRequest) tblOrderInfo.getValueAt(selectedRow, 0);
                if(request.getStatus().equals("Order Placed!")){
                    comboBoxDelPerson.setVisible(true);
                    txtDeliveryManName.setVisible(false);
                    btnAccept.setVisible(true);
                    btnReject.setVisible(true);
                }
                if(request.getStatus().equals("Declined")){
                   comboBoxDelPerson.setVisible(false);
                   txtDeliveryManName.setVisible(true);
                    btnAccept.setVisible(false);
                    btnReject.setVisible(false);
               }
                if(request.getStatus().equals("Accepted")){
                    comboBoxDelPerson.setVisible(false);
                    txtDeliveryManName.setVisible(true);
                    btnAccept.setVisible(false);
                    btnReject.setVisible(false);
                }
                if(request.getStatus()=="Delivered"){
                    btnAccept.setVisible(false);
                    btnReject.setVisible(false); 
                    comboBoxDelPerson.setVisible(false);
                    txtDeliveryManName.setVisible(true);
                    btnAccept.setVisible(false);
                    btnReject.setVisible(false);
                }
                    
                    
                    if (request instanceof OrderWorkRequest) {
                        OrderWorkRequest orderWorkRequest = (OrderWorkRequest) tblOrderInfo.getValueAt(selectedRow, 0);
                        if (orderWorkRequest != null) {
        txtRestName.setText(orderWorkRequest.getRestaurant().getRestaurantName());
        
        if(!orderWorkRequest.getStatus().equals("Order Placed!")){
            txtDeliveryManName.setText(orderWorkRequest.getDeliverMan().getName());
        }
        else{
            txtDeliveryManName.setVisible(false);
            comboBoxDelPerson.setVisible(true);
        }
        
        
        txtOrderDate.setText(orderWorkRequest.getRequestDate().toString());
        txtOrderStatus.setText(orderWorkRequest.getStatus());
        
        model.setRowCount(0);  
        double total = 0.0;

        for (AddToCart cartItems : orderWorkRequest.getItemsWithQuatityList()) {
            Object[] row = new Object[tblOrderCartItems.getColumnCount()];
            row[0] = cartItems;
            row[1] = cartItems.getQuantity();
            row[2] = cartItems.getItem().getPrice() * cartItems.getQuantity();
            total += cartItems.getItem().getPrice() * cartItems.getQuantity();
            model.addRow(row);
        }
         txtTotal.setText(total + "");

                           
                        }
                    }

                }
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this, e);
                }
    }//GEN-LAST:event_tblOrderInfoMouseClicked

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        
        try{
        WorkRequest workRequest=(WorkRequest) tblOrderInfo.getModel().getValueAt(tblOrderInfo.getSelectedRow(), 0);
        workRequest.setDeliverMan(null);
        workRequest.setStatus("Declined");
        JOptionPane.showMessageDialog(null,"Your order has been declined");
        insertIntoTable();
        lblDeliveryPerson.setVisible(false);
        lblRestName.setVisible(false);
        lblOrderDate.setVisible(false);
        lblOrderStatus.setVisible(false);
        btnAccept.setVisible(false);
        btnReject.setVisible(false);
        btnAccept.setVisible(false);
        comboBoxDelPerson.setVisible(false);
        txtOrderDate.setVisible(false);
        txtOrderStatus.setVisible(false);
        txtRestName.setVisible(false);
        txtDeliveryManName.setVisible(false);
        
        btnAccept.setVisible(false);
        btnReject.setVisible(false);

        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }
                
        
        
    }//GEN-LAST:event_btnRejectActionPerformed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        // TODO add your handling code here:

      try{
        
        int index= comboBoxDelPerson.getSelectedIndex();
        DeliveryMan deliveryMan = ecosystem.getDeliveryManDirectory().getDeliveryManList().get(index);
        WorkRequest workRequest=(WorkRequest) tblOrderInfo.getModel().getValueAt(tblOrderInfo.getSelectedRow(), 0);

        workRequest.setDeliverMan(deliveryMan);
        workRequest.setStatus("Accepted");
        JOptionPane.showMessageDialog(null,"Your order has been accepted");
        insertIntoTable();
            txtDeliveryManName.setText(comboBoxDelPerson.getSelectedItem().toString());
        txtDeliveryManName.setVisible(true);
        comboBoxDelPerson.setVisible(false);
        
        
        btnAccept.setVisible(false);
        btnReject.setVisible(false);
      }
      catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
      }
      
    }//GEN-LAST:event_btnAcceptActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnReject;
    private javax.swing.JScrollPane cartScrollPane1;
    private javax.swing.JComboBox<String> comboBoxDelPerson;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDeliveryPerson;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JLabel lblOrderDate;
    private javax.swing.JLabel lblOrderStatus;
    private javax.swing.JLabel lblRestName;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblOrderCartItems;
    private javax.swing.JTable tblOrderInfo;
    private javax.swing.JTextField txtDeliveryManName;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtOrderStatus;
    private javax.swing.JTextField txtRestName;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables

    private void insertIntoTable() {
        DefaultTableModel model = (DefaultTableModel) tblOrderInfo.getModel();
        model.setRowCount(0);
        workRequestList = ecosystem.getWorkQueue().getWorkRequestListRestaurant(account);
        for (WorkRequest request : workRequestList) {
            Object[] row = new Object[tblOrderInfo.getColumnCount()];
            row[0] = request;
            tblOrderInfo.getColumnModel().getColumn(0).setMinWidth(0);
            tblOrderInfo.getColumnModel().getColumn(0).setMaxWidth(0);
            
            row[1] = request.getCustomer();
            row[2] = request.getStatus();
            row[3] = request.getRequestDate();
            model.addRow(row);
        }
    }

}
