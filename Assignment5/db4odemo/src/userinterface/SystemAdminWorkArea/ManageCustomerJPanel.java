/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.Customer.CustomerDirectory;
import Business.EcoSystem;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author krupali
 */
public class ManageCustomerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageCustomerJPanel
     */
    
    EcoSystem ecosystem;
    UserAccountDirectory userAccountList;
    UserAccount userAccount;
    Customer customer;
    CustomerDirectory customerDirectory;
    
    public ManageCustomerJPanel(UserAccount userAccount,EcoSystem ecosystem) {
        initComponents();
        this.ecosystem=ecosystem;
        this.userAccount = userAccount;
        this.customer=customer;
        this.customerDirectory=customerDirectory;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        btnCreateCustomer = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Customers");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 940, 50));

        jLabel2.setText("Username");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 500, 110, 30));

        add(txtUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 500, 290, 30));

        jLabel3.setText("Password");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 550, 130, 30));

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 550, 290, 30));

        jLabel4.setText("Name");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 350, 130, 30));

        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtNameKeyPressed(evt);
            }
        });
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 352, 290, 30));

        jLabel5.setText("Address");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 100, 30));

        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 400, 290, 30));

        btnCreateCustomer.setText("Create");
        btnCreateCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateCustomerActionPerformed(evt);
            }
        });
        add(btnCreateCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 630, 90, 30));

        btnModify.setText("Modify");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });
        add(btnModify, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 630, 90, 30));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 630, 100, 30));

        jLabel6.setText("Phone");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 450, 130, 30));

        add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 450, 290, 30));

        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Address", "Phone", "Username", "Password"
            }
        ));
        tblCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomerMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblCustomer);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 940, 170));
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateCustomerActionPerformed
        // TODO add your handling code here:
        int flag = 1;


        
        if( (txtName.getText().isEmpty() || txtName.getText() == null)){
            JOptionPane.showMessageDialog(txtName, "Error: Name is null or empty");
            flag = 0;
            return;
        } 
        
        if( (txtAddress.getText().isEmpty() || txtAddress.getText() == null)){
            JOptionPane.showMessageDialog(txtAddress, "Error: Address is null or empty");
            flag = 0;
            return;
        }
        
        if(txtPhone.getText().isEmpty() || txtPhone.getText() == null || !txtPhone.getText().matches("^\\d{3}-\\d{3}-\\d{4}$")){
            JOptionPane.showMessageDialog(this,"Error: Phone Number must be in the form XXX-XXX-XXXX and cannot be null or empty");
            return;
        }
        
        if( (txtUserName.getText().isEmpty() || txtUserName.getText() == null)){
            JOptionPane.showMessageDialog(txtUserName, "Error: Username is null or empty");
            flag = 0;
            return;
        }
        
        if( (txtPassword.getText().isEmpty() || txtPassword.getText() == null)){
            JOptionPane.showMessageDialog(txtPassword, "Error: Password is null or empty");
            flag = 0;
            return;
        } 
        
        if( txtUserName.getText().isEmpty()||txtPassword.getText().isEmpty()|| txtName.getText().isEmpty() || txtAddress.getText().isEmpty() || txtPhone.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter all mandatory fields");
            return;
        }
        
        if(flag == 1){
            if(ecosystem.getUserAccountDirectory().checkIfUsernameIsUnique(txtUserName.getText())){
            
            Customer customer = new Customer(txtUserName.getText(), txtPassword.getText(), txtName.getText(), txtAddress.getText(), txtPhone.getText());
            ecosystem.getUserAccountDirectory().addUserAccount(customer);
            ecosystem.getCustomerDirectory().addCustomer(customer);

            insertIntoTable();
            txtUserName.setText("");
            txtPassword.setText("");
            txtName.setText("");
            txtAddress.setText("");
            txtPhone.setText("");
            JOptionPane.showMessageDialog(this,"Custmore details are created.");
            }else{
                JOptionPane.showMessageDialog(null, "Username " + txtUserName.getText() + " already exists !!!, Please try a new one");
            }
       }
    }//GEN-LAST:event_btnCreateCustomerActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        int flag = 1;
        if( (txtName.getText().isEmpty() || txtName.getText() == null)){
            JOptionPane.showMessageDialog(txtName, "Error: Name is null or empty");
            flag = 0;
            return;
        } 
        
        if( (txtAddress.getText().isEmpty() || txtAddress.getText() == null)){
            JOptionPane.showMessageDialog(txtAddress, "Error: Address is null or empty");
            flag = 0;
            return;
        }
        
        if(txtPhone.getText().isEmpty() || txtPhone.getText() == null || !txtPhone.getText().matches("^\\d{3}-\\d{3}-\\d{4}$")){
            JOptionPane.showMessageDialog(this,"Error: Phone Number must be in the form XXX-XXX-XXXX and cannot be null or empty");
            return;
        }
        
        if( (txtUserName.getText().isEmpty() || txtUserName.getText() == null)){
            JOptionPane.showMessageDialog(txtUserName, "Error: Username is null or empty");
            flag = 0;
            return;
        }
        
        if( (txtPassword.getText().isEmpty() || txtPassword.getText() == null)){
            JOptionPane.showMessageDialog(txtPassword, "Error: Password is null or empty");
            flag = 0;
            return;
        }
        
        if( txtUserName.getText().isEmpty()||txtPassword.getText().isEmpty()|| txtName.getText().isEmpty() || txtAddress.getText().isEmpty() || txtPhone.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter all mandatory fields");
            return;
        } 
        
        int selectedRow = tblCustomer.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row");
        } 
        else {
          if(flag == 1){
//            Customer customer = (Customer) tblCustomer.getValueAt(selectedRow, 0);
            Customer customer = ecosystem.getCustomerDirectory().getCustomerList().get(selectedRow);
            customer.setUsername(txtUserName.getText());
            customer.setPassword(txtPassword.getText());
            customer.setName(txtName.getText());
            customer.setPhone(txtPhone.getText());
            customer.setAddress(txtAddress.getText());
            insertIntoTable();
            txtUserName.setText("");
            txtPassword.setText("");
            txtName.setText("");
            txtPhone.setText("");
            txtAddress.setText("");
               
            JOptionPane.showMessageDialog(this,"Customer details are updated.");
    
          }
        }
    }//GEN-LAST:event_btnModifyActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = tblCustomer.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row.");
        } else {
//            Customer customer = (Customer) tblCustomer.getValueAt(selectedRow, 0);
            Customer customer = ecosystem.getCustomerDirectory().getCustomerList().get(selectedRow);
            CustomerDirectory customerDirectory = ecosystem.getCustomerDirectory();
            customerDirectory.removeCustomer(customer);
            JOptionPane.showMessageDialog(null, "Customer   "  + txtUserName.getText() + " deleted");
            insertIntoTable();
            txtName.setText("");
            txtPhone.setText("");
            txtUserName.setText("");
            txtPassword.setText("");
            txtAddress.setText("");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void txtNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyPressed
        // TODO add your handling code here:
                char c = evt.getKeyChar();
        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtName.setEditable(true);
        }
        else{
            txtName.setEditable(false);
            JOptionPane.showMessageDialog(txtName, "Invalid entry. Please enter letters only.");
        }
    }//GEN-LAST:event_txtNameKeyPressed

    private void tblCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomerMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblCustomer.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }
        else{
            try{
            DefaultTableModel model = (DefaultTableModel)tblCustomer.getModel();
           Customer customer = ecosystem.getCustomerDirectory().getCustomerList().get(selectedRow);

//            Customer  customer  = (Customer) tblCustomer.getValueAt(selectedRow, 0);
            if(customer!=null){
                txtName.setText(customer.getName());
                txtAddress.setText(customer.getAddress());
                txtPhone.setText(customer.getPhone());
                txtUserName.setText(customer.getUsername());
                txtPassword.setText(customer.getPassword());
            }
        }
        
        catch(Exception e){
            JOptionPane.showMessageDialog(this, e);
        }     
        }
    }//GEN-LAST:event_tblCustomerMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateCustomer;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnModify;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCustomer;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void insertIntoTable() {
        CustomerDirectory customerDirectory = ecosystem.getCustomerDirectory();
        DefaultTableModel model = (DefaultTableModel) tblCustomer.getModel();
        tblCustomer.setEditingRow(-1);

        model.setRowCount(0);
        for (Customer customer : customerDirectory.getCustomerList()) {
                    Object[] row = new Object[5];
                    row[0] = customer.getName();
                    row[1] = customer.getAddress();
                    row[2] = customer.getPhone();
                    row[3] = customer.getUsername();
                    row[4] = customer.getPassword();

                    model.addRow(row);
                
            }
    }
}
