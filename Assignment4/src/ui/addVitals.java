/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import com.toedter.calendar.JTextFieldDateEditor;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VisitHistory;
import model.Visits;
import model.VitalSigns;

/**
 *
 * @author krupa
 */
public class addVitals extends javax.swing.JPanel {

    /**
     * Creates new form addVitals
     */
    
    PersonDirectory persondirectory;
    PatientDirectory patientdirectory;
    VisitHistory visitHistory;
    public addVitals(PersonDirectory persondirectory,Patient patient, PatientDirectory patientdirectory) {
        initComponents();
        this.persondirectory=persondirectory;
        this.patientdirectory=patientdirectory;
        this.visitHistory = visitHistory;
        JTextFieldDateEditor editor = (JTextFieldDateEditor)jDateAptDate.getDateEditor();
        editor.setEditable(false);  
//        txtPatName.setEditable(false);

        insertIntoAptTable(patientdirectory);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDeleteApt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblApt = new javax.swing.JTable();
        lblAddVitals = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        lblAptDate = new javax.swing.JLabel();
        lblRespRate = new javax.swing.JLabel();
        lblHeartRate = new javax.swing.JLabel();
        lblBP = new javax.swing.JLabel();
        txtPatId = new javax.swing.JTextField();
        txtResRate = new javax.swing.JTextField();
        txtHeartRate = new javax.swing.JTextField();
        jDateAptDate = new com.toedter.calendar.JDateChooser();
        txtBp = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 204));

        btnDeleteApt.setBackground(new java.awt.Color(153, 153, 153));
        btnDeleteApt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnDeleteApt.setText("Delete Appointment");
        btnDeleteApt.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(102, 102, 102), null, null));
        btnDeleteApt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAptActionPerformed(evt);
            }
        });

        tblApt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblApt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Patient Id", "Appointment date", "Respiratory Rate", "Blood Pressure", "Heart Rate"
            }
        ));
        tblApt.setSelectionBackground(new java.awt.Color(255, 102, 102));
        tblApt.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblApt.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblApt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAptMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblApt);

        lblAddVitals.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblAddVitals.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddVitals.setText("ADD  VITALS");
        lblAddVitals.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblAddVitals.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblPatientId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPatientId.setForeground(new java.awt.Color(102, 102, 102));
        lblPatientId.setText("Patient ID");
        lblPatientId.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblAptDate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAptDate.setForeground(new java.awt.Color(102, 102, 102));
        lblAptDate.setText("Appointment Date");
        lblAptDate.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblRespRate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblRespRate.setForeground(new java.awt.Color(102, 102, 102));
        lblRespRate.setText("Respiratory Rate");
        lblRespRate.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblHeartRate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblHeartRate.setForeground(new java.awt.Color(102, 102, 102));
        lblHeartRate.setText("Heart Rate");
        lblHeartRate.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        lblBP.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblBP.setForeground(new java.awt.Color(102, 102, 102));
        lblBP.setText("Blood Pressure");
        lblBP.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        txtPatId.setEditable(false);

        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 963, Short.MAX_VALUE)
            .addComponent(lblAddVitals, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblPatientId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblRespRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAptDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHeartRate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtHeartRate)
                        .addComponent(txtResRate)
                        .addComponent(jDateAptDate, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                        .addComponent(txtBp))
                    .addComponent(txtPatId, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnDeleteApt, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(377, 377, 377))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jDateAptDate, txtBp, txtHeartRate, txtPatId, txtResRate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteApt, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblAddVitals, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientId)
                    .addComponent(txtPatId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblAptDate))
                    .addComponent(jDateAptDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRespRate)
                    .addComponent(txtResRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBP)
                    .addComponent(txtBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeartRate)
                    .addComponent(txtHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(158, 158, 158))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jDateAptDate, txtBp, txtHeartRate, txtPatId, txtResRate});

    }// </editor-fold>//GEN-END:initComponents

    private void btnDeleteAptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAptActionPerformed
        int rowNumber=tblApt.getSelectedRow();
                int flag=1;
                if(rowNumber<0){
                    JOptionPane.showMessageDialog(this, "Please select a row to delete");
                    return;
                }
                if(flag == 1){
                        patientdirectory.getPatientList().remove(rowNumber);
                        JOptionPane.showMessageDialog(this, "Patient deleted successfully");

                }
                insertIntoAptTable(patientdirectory);
    }//GEN-LAST:event_btnDeleteAptActionPerformed

    private void tblAptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAptMouseClicked
        // TODO add your handling code here:

try{        
        int i = tblApt.getSelectedRow();
        if(i<0){
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
        }

        DefaultTableModel model = (DefaultTableModel)tblApt.getModel();
        Patient patient = patientdirectory.getPatientList().get(i);
        txtPatId.setText(model.getValueAt(i, 0).toString());
//        jDateAptDate.setDate((Date) model.getValueAt(i, 1));
//        txtResRate.setText(model.getValueAt(i, 2).toString());
//        txtBp.setText(model.getValueAt(i, 3).toString());
//        txtHeartRate.setText(model.getValueAt(i, 4).toString());
       


        


        if(model.getValueAt(i, 1)=="" || model.getValueAt(i, 1)==null || model.getValueAt(i, 1).toString().isEmpty()){
            jDateAptDate.setDate(new Date());
        }
        else{
            jDateAptDate.setDate((Date) model.getValueAt(i, 1));            
        }
        
        if(model.getValueAt(i, 2)=="" || model.getValueAt(i, 2)==null || model.getValueAt(i, 2).toString().isEmpty()){
            txtResRate.setText("");
        }
        else{
            txtResRate.setText(model.getValueAt(i, 2).toString());            
        }

        
        if(model.getValueAt(i, 3)=="" || model.getValueAt(i, 3)==null || model.getValueAt(i, 3).toString().isEmpty()){
            txtBp.setText("");
        }
        else{
            txtBp.setText(model.getValueAt(i, 3).toString());
        }
        
        if(model.getValueAt(i, 4)=="" || model.getValueAt(i, 4)==null || model.getValueAt(i, 4).toString().isEmpty()){
            txtHeartRate.setText("");
        }
        else{
            txtHeartRate.setText(model.getValueAt(i, 4).toString()); 
        }
        

}
catch(Exception e){
    JOptionPane.showMessageDialog(this, e);
}
        
    }//GEN-LAST:event_tblAptMouseClicked

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        try {
        int i = tblApt.getSelectedRow();
        if(i<0){
            JOptionPane.showMessageDialog(this, "Please select a row to update.");
            return; 
        }
        int flag = 1;
        Patient patient = new Patient();
        VitalSigns vitalSigns = new VitalSigns();
        Visits visit = new Visits();
        VisitHistory visitHistory = new VisitHistory();
        if(txtResRate.getText().isEmpty() || txtResRate.getText() == null){
            JOptionPane.showMessageDialog(this,"Error: Respiratory Rate cannot be null or empty");
            flag = 0;
            return;
        }          
        if(txtBp.getText().isEmpty() || txtBp.getText() == null){
            JOptionPane.showMessageDialog(this,"Error: Respiratory Rate cannot be null or empty");
            flag = 0;
            return;
        }
        if(txtHeartRate.getText().isEmpty() || txtHeartRate.getText() == null){
            JOptionPane.showMessageDialog(this,"Error: Respiratory Rate cannot be null or empty");
            flag = 0;
            return;
        }        
        vitalSigns.setRespiratoryRate(Integer.parseInt(txtResRate.getText()));
        vitalSigns.setBloodPressure(Integer.parseInt(txtBp.getText()));
        vitalSigns.setHeartRate(Integer.parseInt(txtHeartRate.getText()));

        patient.setPatientId(txtPatId.getText());

        SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
            String currentDate = sdf.format(new Date());
            String selectedDate = sdf.format(jDateAptDate.getDate());
            DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");            



            if((dateFormat.parse(selectedDate).before(dateFormat.parse(currentDate)))){
                JOptionPane.showMessageDialog(this, "Error: Appointment has to be after current date.");
                flag = 0;
                return;
            }
            else if( selectedDate.isEmpty()  || selectedDate == null){
                JOptionPane.showMessageDialog(this, "Error: Appointment Date is null or empty");
                flag = 0;
                return;
            }
            else{
                visit.setVisitOn(jDateAptDate.getDate());
            }
        
        
        visit.setVitalSigns(vitalSigns);

        
        visitHistory.setVisitHistory(visit);
        patient.setVisitHistory(visitHistory);
        patientdirectory.getPatientList().set(tblApt.getSelectedRow(), patient);
        insertIntoAptTable(patientdirectory);
        txtPatId.setText("");
        jDateAptDate.setDate(new Date());
        txtResRate.setText("");
        txtBp.setText("");
        txtHeartRate.setText("");
        JOptionPane.showMessageDialog(this,"Vital signs are added");
        }
        catch (ParseException ex) {
            Logger.getLogger(addVitals.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSubmitActionPerformed
    
    
    private void insertIntoAptTable(PatientDirectory patientDirectory) {
        DefaultTableModel model = (DefaultTableModel)tblApt.getModel();
        model.setRowCount(0);
//            int i = tblApt.getSelectedRow();
//            if(i<0){
//                JOptionPane.showMessageDialog(this, "Please select a row to update.");
//            }

        for(Patient patient: patientDirectory.getPatientList()){
           if(        (patient.getPatientId()== null || patient.getPatientId().isEmpty())  
            ){
               return;
           }
           else{
            Object[] row= new Object[5];
            
            row[0]=patient.getPatientId();
//            for(Person person: persondirectory.getPersonList()){
////                if(patient.getPatientId() == person.getPatient().getPatientId() && (txtPatName.getText().trim().isEmpty() || txtPatName.getText()!="" || txtPatName.getText()==null)){
////                    row[1]=person.getFirstName();  
////                }
////                else{
////                    row[1]=txtPatName.getText();
////
////            }
//            }
            if(patient.getVisitHistory()!=null){
                for(Visits visits: patient.getVisitHistory().getVisitHistory()){
                    row[1]=visits.getVisitOn();
                    row[2]=visits.getVitalSigns().getRespiratoryRate();
                    row[3]=visits.getVitalSigns().getBloodPressure();
                    row[4]=visits.getVitalSigns().getHeartRate();
                    
                }
            }            

            model.addRow(row);
            }  
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteApt;
    private javax.swing.JButton btnSubmit;
    private com.toedter.calendar.JDateChooser jDateAptDate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddVitals;
    private javax.swing.JLabel lblAptDate;
    private javax.swing.JLabel lblBP;
    private javax.swing.JLabel lblHeartRate;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblRespRate;
    private javax.swing.JTable tblApt;
    private javax.swing.JTextField txtBp;
    private javax.swing.JTextField txtHeartRate;
    private javax.swing.JTextField txtPatId;
    private javax.swing.JTextField txtResRate;
    // End of variables declaration//GEN-END:variables
}
