/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import com.toedter.calendar.JTextFieldDateEditor;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.UUID;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Community;
import model.House;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author krupali
 */
public class createPatient extends javax.swing.JPanel {

    /**
     * Creates new form createPatient
     */
    PersonDirectory persondirectory;
    PatientDirectory patientdirectory;
    
    public createPatient(PersonDirectory persondirectory,Patient patient, PatientDirectory patientdirectory) {
        initComponents();
        this.persondirectory=persondirectory;
        this.persondirectory=persondirectory;
        this.patientdirectory=patientdirectory;
//        JTextFieldDateEditor editor = (JTextFieldDateEditor)jDateDob.getDateEditor();
//        editor.setEditable(false);        
        insertIntoTableFromPersonDir(persondirectory);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblAge = new javax.swing.JLabel();
        lblMobNo = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblHouseNo = new javax.swing.JLabel();
        lblStreet = new javax.swing.JLabel();
        lblCommunity = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        lblPatientId = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtMobNo = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtStreet = new javax.swing.JTextField();
        txtHouseNo = new javax.swing.JTextField();
        txtPatientiD = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        lblManagePatient = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        jComboCity = new javax.swing.JComboBox<>();
        jComboCommunity = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(204, 204, 204));

        tblPatient.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Age", "Mobile Number", "Email", "House Number", "Street", "Community", "City", "Patient I'd"
            }
        ));
        tblPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPatient);

        lblFirstName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblFirstName.setForeground(new java.awt.Color(102, 102, 102));
        lblFirstName.setText("First Name:");

        lblLastName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblLastName.setForeground(new java.awt.Color(102, 102, 102));
        lblLastName.setText("Last Name:");

        lblAge.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblAge.setForeground(new java.awt.Color(102, 102, 102));
        lblAge.setText("Age:");

        lblMobNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblMobNo.setForeground(new java.awt.Color(102, 102, 102));
        lblMobNo.setText("Mobile Number:");

        lblEmail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(102, 102, 102));
        lblEmail.setText("Email I'd:");

        lblHouseNo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblHouseNo.setForeground(new java.awt.Color(102, 102, 102));
        lblHouseNo.setText("House Number:");

        lblStreet.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblStreet.setForeground(new java.awt.Color(102, 102, 102));
        lblStreet.setText("Street:");

        lblCommunity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCommunity.setForeground(new java.awt.Color(102, 102, 102));
        lblCommunity.setText("Community:");

        lblCity.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblCity.setForeground(new java.awt.Color(102, 102, 102));
        lblCity.setText("City:");

        lblPatientId.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblPatientId.setForeground(new java.awt.Color(102, 102, 102));
        lblPatientId.setText("Patient Id");

        txtFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFirstNameKeyPressed(evt);
            }
        });

        txtLastName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtLastNameKeyPressed(evt);
            }
        });

        txtStreet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStreetActionPerformed(evt);
            }
        });
        txtStreet.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtStreetKeyPressed(evt);
            }
        });

        txtHouseNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHouseNoActionPerformed(evt);
            }
        });
        txtHouseNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtHouseNoKeyPressed(evt);
            }
        });

        txtPatientiD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientiDActionPerformed(evt);
            }
        });

        btnSubmit.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        lblManagePatient.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblManagePatient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblManagePatient.setText("Manage Patient");

        txtAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAgeKeyPressed(evt);
            }
        });

        jComboCity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Boston", "NY", "Chicago" }));
        jComboCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboCityActionPerformed(evt);
            }
        });

        jComboCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bridges Community", "Friends Community", "Christian Community", "Jewish Community" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
            .addComponent(lblManagePatient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblMobNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAge, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblLastName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblHouseNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCity, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)
                    .addComponent(lblEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(lblPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtFirstName)
                        .addComponent(txtLastName)
                        .addComponent(txtEmail)
                        .addComponent(txtHouseNo, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(txtMobNo, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(txtStreet, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                        .addComponent(txtPatientiD)
                        .addComponent(txtAge)
                        .addComponent(jComboCity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jComboCommunity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(412, 412, 412))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtEmail, txtFirstName, txtHouseNo, txtLastName, txtMobNo, txtStreet});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblAge, lblCity, lblCommunity, lblEmail, lblFirstName, lblHouseNo, lblLastName, lblMobNo, lblStreet});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(84, 84, 84)
                .addComponent(lblManagePatient, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFirstName)
                        .addGap(18, 18, 18)
                        .addComponent(lblLastName)
                        .addGap(19, 19, 19)
                        .addComponent(lblAge)
                        .addGap(18, 18, 18)
                        .addComponent(lblMobNo)
                        .addGap(18, 18, 18)
                        .addComponent(lblEmail)
                        .addGap(18, 18, 18)
                        .addComponent(lblHouseNo)
                        .addGap(18, 18, 18)
                        .addComponent(lblStreet))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtMobNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtHouseNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jComboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtPatientiD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCommunity)
                        .addGap(18, 18, 18)
                        .addComponent(lblCity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtEmail, txtFirstName, txtHouseNo, txtLastName, txtMobNo, txtStreet});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblAge, lblCity, lblCommunity, lblEmail, lblFirstName, lblHouseNo, lblLastName, lblMobNo, lblStreet});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblPatientId, txtPatientiD});

    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        
        try{
            int i = tblPatient.getSelectedRow();
            if(i<0){
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
                return; 
            }
            int flag = 1;
            
            if( (txtFirstName.getText().isEmpty() || txtFirstName.getText() == null)){
                JOptionPane.showMessageDialog(txtFirstName, "Error: First name is null or empty");
                flag = 0;
                return;
            }  
            
            if( (txtLastName.getText().isEmpty() || txtLastName.getText() == null)){
                JOptionPane.showMessageDialog(txtLastName, "Error: Last name is null or empty");
                flag = 0;
                return;
            }
            
            if(txtAge.getText().isEmpty() || txtAge.getText()==null || txtAge.getText().matches("\\d")){
                JOptionPane.showMessageDialog(txtAge, "Error: Age is null or empty");
                flag = 0;
                return;                
            }
        
            
//            SimpleDateFormat sdf = new SimpleDateFormat("MM-dd-yyyy");
//            String currentDate = sdf.format(new Date());
//            String selectedDate = sdf.format(jDateDob.getDate());
//            DateFormat dateFormat = new SimpleDateFormat("MM-dd-yyyy");            
//            if(!(dateFormat.parse(selectedDate).before(dateFormat.parse(currentDate)))){
//                JOptionPane.showMessageDialog(this, "Error: DOB has to be before current date.");
//                flag = 0;
//                return;
//            }
//            else if( selectedDate.isEmpty()  || selectedDate == null){
//                JOptionPane.showMessageDialog(this, "Error: DOB is null or empty");
//                flag = 0;
//                return;
//            }
            
            if(txtMobNo.getText().isEmpty() || txtMobNo.getText() == null || !txtMobNo.getText().matches("^\\d{3}-\\d{3}-\\d{4}$")){
                JOptionPane.showMessageDialog(this,"Error: Phone Number must be in the form XXX-XXX-XXXX and cannot be null or empty");
                flag = 0;
                return;
            }
            
            if(!txtEmail.getText().matches("^[A-Za-z0-9+_.-]+@(.+)$") || txtEmail.getText().isEmpty() || txtEmail.getText() == null){
                JOptionPane.showMessageDialog(this, "Error: Invalid Email address.");
                flag = 0;
                return;
            }

            if(txtStreet.getText().isEmpty() || txtStreet.getText() == null){
                JOptionPane.showMessageDialog(this,"Error: Street cannot be null or empty");
                flag = 0;
                return;
            }

//            if(txtCommunity.getText().isEmpty() || txtCommunity.getText() == null){
//                JOptionPane.showMessageDialog(this,"Error: Community name cannot be null or empty");
//                flag = 0;
//                return;
//            }
//            
//            
//            
//
//            if(txtCity.getText().isEmpty() || txtCity.getText() == null){
//                JOptionPane.showMessageDialog(this,"Error: City cannot be null or empty");
//                flag = 0;
//                return;
//            }            
//           
            if(flag == 1){
                Patient patient = new Patient();
                Person person = new Person();
                House house = new House();
                Community community = new Community();
                City city = new City();
                patient.setPatientId(txtPatientiD.getText());
                person.setFirstName(txtFirstName.getText());
                person.setLastName(txtLastName.getText());
//                person.setDOB(jDateDob.getDate());
                person.setAge(Integer.parseInt(txtAge.getText()));
                person.setContactNo(txtMobNo.getText());
                person.setEmail(txtEmail.getText());                
                house.setHouseNo(Integer.parseInt(txtHouseNo.getText()));
                house.setStreet(txtStreet.getText());
//                community.setCommunityName(txtCommunity.getText());
//                city.setCityName(txtCity.getText());
                community.setCommunityName(jComboCommunity.getSelectedItem().toString());
                city.setCityName(jComboCity.getSelectedItem().toString());
                community.setCity(city);
                house.setCommunity(community);
                person.setHouse(house);
                
     
                person.setPatient(patient); 
                persondirectory.getPersonList().set(tblPatient.getSelectedRow(), person);
                insertIntoTableFromPersonDir(persondirectory);

                txtFirstName.setText("");
                txtLastName.setText("");
                txtAge.setText("");
                txtMobNo.setText("");
                txtEmail.setText("");
                txtHouseNo.setText("");
                txtStreet.setText("");
//                txtCommunity.setText("");
//                txtCity.setText("");
                txtPatientiD.setText("");

                
        
                patientdirectory.setPatientList(patient);    
                JOptionPane.showMessageDialog(this,"Patient details are added/updated.");
    
            }




        
     
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this,e);

        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void txtFirstNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFirstNameKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtFirstName.setEditable(true);
        }
        else{
            txtFirstName.setEditable(false);
            JOptionPane.showMessageDialog(txtFirstName, "Invalid entry. Please enter letters only.");
        }

    }//GEN-LAST:event_txtFirstNameKeyPressed

    private void txtLastNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtLastNameKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtLastName.setEditable(true);
        }
        else{
            txtLastName.setEditable(false);
            JOptionPane.showMessageDialog(txtFirstName, "Invalid entry. Please enter letters only.");
        }
    }//GEN-LAST:event_txtLastNameKeyPressed

    private void txtHouseNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHouseNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHouseNoActionPerformed

    private void txtStreetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStreetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStreetActionPerformed

    private void tblPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatientMouseClicked
        // TODO add your handling code here:

            int i = tblPatient.getSelectedRow();
            if(i<0){
                JOptionPane.showMessageDialog(this, "Please select a row to update.");
            }

            DefaultTableModel model = (DefaultTableModel)tblPatient.getModel();
           // Patient patient = patientdirectory.getPatientList().set(i, element);
           Person person = persondirectory.getPersonList().get(i);
          
            txtFirstName.setText(model.getValueAt(i, 0).toString());
            txtLastName.setText(model.getValueAt(i, 1).toString());
//            jDateDob.setDate((Date) model.getValueAt(i, 2));
            txtAge.setText(model.getValueAt(i, 2).toString());
            txtMobNo.setText(model.getValueAt(i, 3).toString());
            txtEmail.setText(model.getValueAt(i, 4).toString());
            txtHouseNo.setText(model.getValueAt(i, 5).toString());
            txtStreet.setText(model.getValueAt(i, 6).toString());
            jComboCommunity.setSelectedItem(model.getValueAt(i, 7).toString());
            jComboCity.setSelectedItem(model.getValueAt(i, 8).toString());
//            txtCommunity.setText(model.getValueAt(i, 7).toString());
//            txtCity.setText(model.getValueAt(i, 8).toString());
            txtPatientiD.setVisible(true);
            lblPatientId.setVisible(true);
            txtPatientiD.setEditable(false);
            if(model.getValueAt(i, 9) == null || model.getValueAt(i, 9) == ""){
                String patientId = UUID.randomUUID().toString();
                txtPatientiD.setText(patientId);
            }
            else{
                txtPatientiD.setEditable(false);  
                txtPatientiD.setVisible(false);
                lblPatientId.setVisible(false);                
                txtPatientiD.setText(person.getPatient().getPatientId());
            }



             
    }//GEN-LAST:event_tblPatientMouseClicked

    private void txtAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAgeKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtAge.setEditable(true);  
        }
        else{
            txtAge.setEditable(false);
            JOptionPane.showMessageDialog(txtAge, "Invalid Age");
        }
    }//GEN-LAST:event_txtAgeKeyPressed

    private void txtPatientiDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientiDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientiDActionPerformed

    private void jComboCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboCityActionPerformed

    private void txtHouseNoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtHouseNoKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtHouseNo.setEditable(true);  
        }
        else{
            txtHouseNo.setEditable(false);
            JOptionPane.showMessageDialog(txtHouseNo, "Invalid House Number");
        }
    }//GEN-LAST:event_txtHouseNoKeyPressed

    private void txtStreetKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStreetKeyPressed
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        if(Character.isLetter(c) || Character.isWhitespace(c) || Character.isISOControl(c)){
            txtStreet.setEditable(true);  
        }
        else{
            txtStreet.setEditable(false);
            JOptionPane.showMessageDialog(txtStreet, "Invalid Street Number");
        }
    }//GEN-LAST:event_txtStreetKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> jComboCity;
    private javax.swing.JComboBox<String> jComboCommunity;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblHouseNo;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblManagePatient;
    private javax.swing.JLabel lblMobNo;
    private javax.swing.JLabel lblPatientId;
    private javax.swing.JLabel lblStreet;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHouseNo;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMobNo;
    private javax.swing.JTextField txtPatientiD;
    private javax.swing.JTextField txtStreet;
    // End of variables declaration//GEN-END:variables

  
    
    
   
    private void insertIntoTableFromPersonDir(PersonDirectory personDirectory) {
        DefaultTableModel model = (DefaultTableModel)tblPatient.getModel();
        tblPatient.setEditingRow(-1);
        model.setRowCount(0);
        for(Person person: persondirectory.getPersonList()){
           if(        (person.getFirstName()== null || person.getFirstName().isEmpty()) 
                   || ((person.getLastName()== null || person.getLastName().isEmpty()) )
                   //|| (person.getDOB()== null)
                   || (person.getContactNo()== null || person.getContactNo().isEmpty())
                   || (person.getEmail()== null || person.getEmail().isEmpty()) 
            ){
               return;
           }
           else{
            Object[] row= new Object[10];
        
            row[0]=person.getFirstName();
            row[1]=person.getLastName();
//            row[2]=person.getDOB();
            row[2]=person.getAge();
            row[3]=person.getContactNo();
            row[4]=person.getEmail();
            row[5]=person.getHouse().getHouseNo();
            row[6]=person.getHouse().getStreet();
            row[7]=person.getHouse().getCommunity().getCommunityName();
            row[8]=person.getHouse().getCommunity().getCity().getCityName();
            if(person.getPatient()!=null){
            row[9]=person.getPatient().getPatientId();
            }
            model.addRow(row);
            }  
        }
    }
    
    
}
